# Smart Bin Fill Level Detection Project

## Overview
This project is an AI-powered waste bin fill level detection system. It uses a YOLO11s model trained on annotated images to detect the fill status of bins in real time or from uploaded images. The system is built with Flask for the backend and a modern web interface for user interaction.

## Main Features
- Real-time video stream analysis from an RTSP camera
- Image upload and fill level detection
- Interactive web dashboard
- YOLO11s model integration via Ultralytics API
- Configurable detection parameters (confidence, IOU)
- Health check and statistics endpoints

## Project Structure & File Descriptions

- `app_clean.py`: Main Flask backend. Handles video streaming, image analysis, API endpoints, and YOLO integration.
- `index2.html`: Web dashboard for uploading images, viewing results, and controlling real-time analysis.
- `label_studio_auto_rename.py`: Utility script to rename exported Label Studio annotation files to match image filenames for YOLO training.
- `ImagesV2/`: Contains the image database used for training and testing. Images were annotated using Label Studio.
- `detect/`, `detect-V2/`: Folders containing YOLO-format label files. These are organized and should be zipped for compatibility with Ultralytics online training and inference.
- `Archives/`: Compilation of older versions of the project and alternative methods previously used.
- `READ_ME`: This documentation file.

## Data Annotation & Model Training
- Images in `ImagesV2` were annotated using Label Studio.
- The annotation files were renamed using `label_studio_auto_rename.py` to match YOLO requirements.
- The YOLO11s model was trained on Google Colab and stored on Ultralytics Hub for easy API access.

## How to Use
1. **Start the Flask server**: Run `app_clean.py` to launch the backend and web dashboard.
2. **Upload images or connect to the camera**: Use the web interface (`index2.html`) to upload images or view the live stream.
3. **Analyze bin fill levels**: The system will use the YOLO11s model to detect and display the fill status (empty, full, overloaded).
4. **Configure detection parameters**: Adjust confidence and IOU thresholds in the dashboard for optimal results.

## Notes
- Label files must be zipped for use with Ultralytics online tools.
- The `Archives` folder contains legacy code and previous approaches for reference.
- The YOLO11s model is accessed via Ultralytics API using the provided keys in `app_clean.py`.

## Requirements
- Python 3.7+
- Flask
- Ultralytics API access
- Label Studio (for annotation)
- FFmpeg (for RTSP streaming)

## Credits
- Model training: Google Colab + Ultralytics
- Annotation: Label Studio
- Web UI: Custom HTML/CSS/JS

For further details, see comments in each source file.

## Sources
The following resources were used and referenced in this project:

- https://hub.ultralytics.com/
- https://labelstud.io
- https://github.com/ultralytics/ultralytics
- https://github.com/AyuAnchor/project-blind-backend/tree/main
- https://www.researchgate.net/publication/304711436_Implementation_of_spatial_smart_waste_management_system_in_malaysia
- https://universe.roboflow.com/trash-and-garbage/garbage-and-trashes
